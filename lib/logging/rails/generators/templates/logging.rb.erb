Logging::Rails.configure do |config|

  # Objects will be converted to strings using the :format_as method.
  Logging.format_as :inspect

  # The default layout used by the appenders.
  layout = Logging.layouts.pattern(:pattern => '[%d] %-5l %c : %m\n')

  # Configure an appender that will write log events to a file. The file will
  # be rolled on a daily basis, and the past 7 rolled files will be kept.
  # Older files will be deleted. The default pattern layout is used when
  # formatting log events into strings.
  #
  Logging.appenders.rolling_file( 'file',
    :filename => config.paths['log'].first,
    :keep => 7,
    :age => 'daily',
    :truncate => false,
    :auto_flushing => true,
    :layout => Logging.layouts.json(:items => ['timestamp' ,'level', 'logger', 'message', 'pid', 'mdc'], :format_as => :yaml)
  ) if config.log_to.include? 'file'


  Logging.mdc[' '] = Rails.application.class.parent_name

  Logging.init :debug, :info, :event, :warn, :error, :fatal

  Logging.logger.root.level = config.log_level
  Logging.logger.root.appenders = config.log_to unless config.log_to.empty?

  # Under Phusion Passenger smart spawning, we need to reopen all IO streams
  # after workers have forked.
  #
  # The rolling file appender uses shared file locks to ensure that only one
  # process will roll the log file. Each process writing to the file must have
  # its own open file descriptor for `flock` to function properly. Reopening
  # the file descriptors after forking ensures that each worker has a unique
  # file descriptor.
  #
  if defined?(PhusionPassenger)
    PhusionPassenger.on_event(:starting_worker_process) do |forked|
      Logging.reopen if forked
    end
  end

end

